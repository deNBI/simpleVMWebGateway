location /{{ key_url }} {


                # Run this lua block, which checks if we are authenticated (again) und filters request by JWT (via id_token.sub)
                access_by_lua_block {
                        -- Start actual openid authentication procedure
                        local res, err = require("resty.openidc").authenticate(opts2)
                        -- If it fails for some reason, escape via HTTP 500
                        if err then
                                ngx.status = 500
                                ngx.say(err)
                                ngx.exit(ngx.HTTP_INTERNAL_SERVER_ERROR)
                        end

                        -- Protect this location and allow only one specific ELIXIR User
                        if res.id_token.sub ~= "{{ owner }}@elixir-europe.org" then
                                ngx.exit(ngx.HTTP_FORBIDDEN)
                        end
                }

                # After check via lua-oidc is done, start reverse proxying this backend by configuring a billion headers.
        rewrite /{{ key_url }}/(.*) /$1 break;
        proxy_pass {{ location_url }};
        sub_filter '"/' '"/{{ key_url }}/';
        sub_filter_once off;

        proxy_http_version 1.1;
        proxy_set_header Host $host:$server_port;
        proxy_set_header X-Forwarded-Host $server_name;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-Proto https;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "Upgrade";
        proxy_set_header Origin '';

	}