    # PROTECT FIRST THEIA CONTAINER
    location /{{ key_url }}/ {
        set $session_cipher none;                 # don't need to encrypt the session content, it's an opaque identifier
        set $session_storage shm;                 # use shared memory
        set $session_cookie_persistent on;        # persist cookie between browser sessions
        set $session_cookie_renew      3500;      # new cookie every hour
        set $session_cookie_lifetime   86400;     # lifetime for persistent cookies
        set $session_name              sess_auth; # name of the cookie to store the session identifier in

        set $session_shm_store         sessions;  # name of the dict to store sessions in
        # See https://github.com/bungle/lua-resty-session#shared-dictionary-storage-adapter for the following options
        set $session_shm_uselocking    off;
        set $session_shm_lock_exptime  3;
        set $session_shm_lock_timeout  2;
        set $session_shm_lock_step     0.001;
        set $session_shm_lock_ratio    1;
        set $session_shm_lock_max_step 0.5;

        set $user_path '{{ forc_backend_path }}/users/{{backend_id}}/';
        # Run this lua block, which checks if we are authenticated (again) und filters request by JWT (via id_token.sub)
        access_by_lua_block {
            local user_service = require("user_service")
            -- Start actual openid authentication procedure
            local res, err = require("resty.openidc").authenticate(opts2)
            -- If it fails for some reason, escape via HTTP 500
            if err then
                ngx.status = 500
                ngx.say(err)
                ngx.exit(ngx.HTTP_INTERNAL_SERVER_ERROR)
            end

            -- Protect this location and allow only one specific ELIXIR User
            if (res.id_token.sub ~= "{{ owner }}" and not user_service.file_exists(ngx.var.user_path .. res.id_token.sub)) then
                ngx.exit(ngx.HTTP_FORBIDDEN)
            end

            ngx.req.set_header("X-Auth-Audience", res.id_token.aud)
            ngx.req.set_header("X-Auth-Email", res.id_token.email)
            ngx.req.set_header("X-Auth-ExpiresIn", res.id_token.exp)
            ngx.req.set_header("X-Auth-Name", res.id_token.name)
            ngx.req.set_header("X-Auth-Subject", res.id_token.sub)
            ngx.req.set_header("X-Auth-Userid", res.id_token.preferred_username)
            ngx.req.set_header("X-Auth-Username", res.id_token.preferred_username)
            ngx.req.set_header("X-Auth-Locale", res.id_token.locale)
        }

        # After check via lua-oidc is done, start reverse proxying this backend by configuring a billion headers.
        rewrite /{{ key_url }}/(.*) /$1 break;
        proxy_pass {{ location_url }};
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection $connection_upgrade;

        client_max_body_size 0;
        add_header Strict-Transport-Security "max-age=63072000; includeSubDomains; preload" always;
        add_header Referrer-Policy "same-origin" always;
        access_log logs/code.access.log;
        error_log logs/code.error.log;
    }