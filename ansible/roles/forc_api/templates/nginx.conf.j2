worker_processes  {{ OPENRESTY_WORKER_PROCESSES }};

# /usr/local/openresty/nginx/logs/
error_log  logs/error.log;
error_log  logs/error.log  notice;
error_log  logs/error.log  info;
error_log  logs/error.log  debug;
events {
    worker_connections  1024;
}

http {
    include       mime.types;
    lua_package_path "{{ FORC_BACKEND_PATH }}/scripts/?.lua;;";
    default_type  application/octet-stream;
    #For some reason, nginx wants a hardcoded Name Resolver
    resolver {{ OPENRESTY_DNS_SERVER }};
    sendfile        on;
    keepalive_timeout  65;
    #LUA caches for various session modules
    lua_shared_dict discovery 1m;
    lua_shared_dict jwks 1m;
    lua_shared_dict sessions 10m;
    lua_code_cache off;
    client_max_body_size 100M;

     #Allow websockets by allowing general connection upgrade requests, theia needs websockets
     map $http_upgrade $connection_upgrade {
         default upgrade;
        '' close;
       }

    #Create global LUA variable which keeps our ELIXIR AAI Configuration dict
    init_by_lua_block {

        opts2 = {
                redirect_uri = "https://{{ DOMAIN }}/redirect_uri",
                discovery = "{{ FORC_OIDC_DISCOVERY_URL }}",
                client_id = "{{ FORC_OIDC_CLIENT_ID }}",
                client_secret = "{{ FORC_OIDC_CLIENT_SECRET }}",
                logout_path = "/logout",
                ssl_verify = "no",
                iat_slack = 600,
                scope = "openid email profile offline_access",
                renew_access_token_on_expiry = true,
                access_token_expires_leeway = 60,
                session_contents = {id_token=true, access_token=true}
          }
     }




    {% if FORC_SERVICE_USE_HTTPS %}
    server {
        listen {{ FORC_SERVICE_PORT }} ssl http2;
        ssl_certificate  /etc/letsencrypt/live/{{ DOMAIN }}/fullchain.pem;
        ssl_certificate_key  /etc/letsencrypt/live/{{ DOMAIN }}/privkey.pem;
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;
        ssl_stapling on;
        ssl_stapling_verify on;
        location / {
            access_by_lua_block {
                -- Start actual openid authentication procedure
                local res, err = require("resty.openidc").authenticate(opts2)
                -- If it fails for some reason, escape via HTTP 500
                if err then
                        ngx.status = 500
                        ngx.say(err)
                        ngx.exit(ngx.HTTP_INTERNAL_SERVER_ERROR)
                end

                ngx.req.set_header("X-Auth-Audience", res.id_token.aud)
                ngx.req.set_header("X-Auth-Email", res.id_token.email)
                ngx.req.set_header("X-Auth-ExpiresIn", res.id_token.exp)
                ngx.req.set_header("X-Auth-Name", res.id_token.name)
                ngx.req.set_header("X-Auth-Subject", res.id_token.sub)
                ngx.req.set_header("X-Auth-Userid", res.id_token.preferred_username)
                ngx.req.set_header("X-Auth-Username", res.id_token.preferred_username)
                ngx.req.set_header("X-Auth-Locale", res.id_token.locale)

            }
        }

    }
    {% else %}
server {
    listen {{ FORC_LOCAL_IP }}:{{ FORC_SERVICE_PORT }};
    location / {
            proxy_pass http://unix:/var/run/forc.sock;
            }
}
    {% endif %}


    server {
        listen 0.0.0.0:80 default_server;
        server_name {{ DOMAIN }};
        return 301 https://$host$request_uri;
    }


    server {
        listen 0.0.0.0:443 ssl http2;
        server_name  {{ DOMAIN }};
        ssl_certificate /etc/letsencrypt/live/{{ DOMAIN }}/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/{{ DOMAIN }}/privkey.pem;
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;
        ssl_prefer_server_ciphers on;
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload";
        add_header X-Frame-Options "SAMEORIGIN";
        add_header X-Content-Type-Options nosniff;
        add_header X-XSS-Protection "1; mode=block";
        add_header Referrer-Policy 'strict-origin';
        ssl_stapling on;
        ssl_stapling_verify on;
        client_max_body_size 100M;
        
        set $session_secret {{ FORC_SECRET_KEY }};
        set $session_cipher none;                 # don't need to encrypt the session content, it's an opaque identifier
        set $session_storage shm;                 # use shared memory
        set $session_cookie_persistent on;        # persist cookie between browser sessions
        set $session_cookie_renew      3500;      # new cookie every hour
        set $session_cookie_lifetime   86400;     # lifetime for persistent cookies
        set $session_name              sess_auth; # name of the cookie to store the session identifier in

        set $session_shm_store         sessions;  # name of the dict to store sessions in
        # See https://github.com/bungle/lua-resty-session#shared-dictionary-storage-adapter for the following options
        set $session_shm_uselocking    off;
        set $session_shm_lock_exptime  3;
        set $session_shm_lock_timeout  2;
        set $session_shm_lock_step     0.001;
        set $session_shm_lock_ratio    1;
        set $session_shm_lock_max_step 0.5;

        location / {

                access_by_lua_block {
                -- Start actual openid authentication procedure
                local res, err = require("resty.openidc").authenticate(opts2)
                -- If it fails for some reason, escape via HTTP 500
                if err then
                        ngx.status = 500
                        ngx.say(err)
                        ngx.exit(ngx.HTTP_INTERNAL_SERVER_ERROR)
                end

                ngx.req.set_header("X-Auth-Audience", res.id_token.aud)
                ngx.req.set_header("X-Auth-Email", res.id_token.email)
                ngx.req.set_header("X-Auth-ExpiresIn", res.id_token.exp)
                ngx.req.set_header("X-Auth-Name", res.id_token.name)
                ngx.req.set_header("X-Auth-Subject", res.id_token.sub)
                ngx.req.set_header("X-Auth-Userid", res.id_token.preferred_username)
                ngx.req.set_header("X-Auth-Username", res.id_token.preferred_username)
                ngx.req.set_header("X-Auth-Locale", res.id_token.locale)

        }

        }

        #Load all dynamicaly created locations.
        include {{ FORC_BACKEND_PATH }}/*.conf;

       error_page   500 502 503 504  /50x.html;
            location = /50x.html {
                root   html;
            }

       error_page   404  /404.html;
            location = /404.html {
                root   html;
            }

       error_page   403  /403.html;
            location = /403.html {
                root   html;
            }    }
}
